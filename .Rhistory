jpeg("templot_1960.jpg", height = 650, width = 1000)
ggplot(data = na.1960) +
geom_tile(aes(x = longitude, y = latitude, fill = airtemp)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Air Temperature in 1960")
## close the device
dev.off()
plot.it <- function(data.year, year, ticker.type) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = ticker.type)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American", ticker.type, "in", year))
## close the device
dev.off()
}
plot.it(na.1960, "1960", "precipitation")
plot.it(na.1960, "1960", na.1960$precipitation)
View(plot.it)
plot.it(na.1960, "1960", na.1960$precipitation)
plot.it <- function(data.year, year, ticker.type) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = !!ticker.type)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American", ticker.type, "in", year))
## close the device
dev.off()
}
plot.it(na.1960, "1960", rlang::sym(na.1960$precipitation)
plot.it(na.1960, "1960", rlang::sym(na.1960$precipitation))
plot.it(na.1960, "1960", "precipitation"
plot.it(na.1960, "1960", "precipitation")
plot.it(na.1960, "1960", "precipitation")
precip.sym <- rlang::sym("precipitation")
plot.it(na.1960, "1960", precip.sym)
plot.it <- function(data.year, year, ticker.type) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = !!ticker.type)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American", ticker.type, "in", year))
## close the device
dev.off()
}
precip.sym <- rlang::sym("precipitation")
precip.sym <- rlang::sym("precipitation")
plot.it(na.1960, "1960", precip.sym)
preciplot <- function(data.year, year) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American", ticker.type, "in", year))
## close the device
dev.off()
}
preciplot(na.1960, "1960")
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
preciplot <- function(data.year, year) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American precipitation", "in", year))
## close the device
dev.off()
}
preciplot(na.1960, "1960")
preciplot <- function(data.year, year) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American precipitation", "in", year))
## close the device
dev.off()
}
preciplot <- function(data.year, year) {
## select jpg graphics device
jpeg(paste0("preciplot_", year, ".jpg"), height = 650, width = 1000)
ggplot(data = data.year) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle(paste("North American precipitation", "in", year))
## close the device
dev.off()
}
preciplot(na.1960, "1960")
## select jpg graphics device
jpeg("preciplot_1960.jpg", height = 650, width = 1000)
ggplot(data = na.1960) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Precipitation in 1960")
## close the device
dev.off()
## select jpg graphics device
jpeg("preciplot_1987.jpg", height = 650, width = 1000)
ggplot(data = na.1987) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Precipitation in 1987")
## close the device
dev.off()
## select jpg graphics device
jpeg("preciplot_2014.jpg", height = 650, width = 1000)
ggplot(data = na.2014) +
geom_tile(aes(x = longitude, y = latitude, fill = precipitation)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Precipitation in 2014")
## close the device
dev.off()
### air temps
## select jpg graphics device
jpeg("templot_1960.jpg", height = 650, width = 1000)
ggplot(data = na.1960) +
geom_tile(aes(x = longitude, y = latitude, fill = airtemp)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Air Temperature in 1960")
## close the device
dev.off()
## select jpg graphics device
jpeg("templot_1987.jpg", height = 650, width = 1000)
ggplot(data = na.1987) +
geom_tile(aes(x = longitude, y = latitude, fill = airtemp)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Air Temperature in 1960")
## close the device
dev.off()
## select jpg graphics device
jpeg("templot_2014.jpg", height = 650, width = 1000)
ggplot(data = na.2014) +
geom_tile(aes(x = longitude, y = latitude, fill = airtemp)) +
coord_quickmap() +
theme_bw(base_size = 20) +
ggtitle("North American Air Temperature in 2014")
## close the device
dev.off()
library(ggplot2)
library(jsonlite)
setwd("~/info_201/Ski-Blade/")
ls
source("./apicall.R")
read.csv("./coordinates.csv", stringsAsFactors = FALSE)
coords <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
View(coords)
stevensPass <- getWeather("47.73723,-121.0951")
library(jsonlite)
stevensPass <- getWeather("47.73723,-121.0951")
stevensPass <- getWeather("47.73723,-121.0951")
library(httr)
stevensPass <- getWeather("47.73723,-121.0951")
View(stevensPass)
getWeather <- function(coords){
darkSky.base.url <- "https://api.darksky.net/forecast/"
darkSky.key <- "1347397e6f4d6150a38600f4e7a5a001/"
response <- GET(paste0(darkSky.base.url, darkSky.key, coords))
body <- content(response, "text")
rep.data <- fromJSON(body)
return(rep.data)
}
stevensPass <- getWeather("47.73723,-121.0951")
View(stevensPass)
stevensPass <- data.frame(getWeather("47.73723,-121.0951"))
stevensPass.raw <- getWeather("47.73723,-121.0951")
weather.raw <- getWeather("47.73723,-121.0951")
source('~/info_201/Ski-Blade/preprocessing.R', echo=TRUE)
weather.raw <- getWeather(coords)
coords <- "47.73723,-121.0951"
weather.raw <- getWeather(coords)
coord.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
coords <- "47.73723,-121.0951"
weather.raw <- getWeather(coords)
getWeather <- function(coords){
darkSky.base.url <- "https://api.darksky.net/forecast/"
darkSky.key <- "1347397e6f4d6150a38600f4e7a5a001/"
response <- GET(paste0(darkSky.base.url, darkSky.key, coords))
body <- content(response, "text")
rep.data <- fromJSON(body)
return(rep.data)
}
coords <- "47.73723,-121.0951"
weather.raw <- getWeather(coords)
temp <- weather.raw$currently$temperature
precip <- weather.raw$currently$precipIntensity
View(weather.raw)
coords <- "47.73723,-121.0951"
temp <- weather.raw$currently$temperature
precip <- weather.raw$currently$precipIntensity
if(precip == 0) {
precip.type <- 'none'
} else {
precip.type <- weather.raw$currently$precipType
}
weather.raw <- getWeather(coords)
View(weather.raw)
source('~/info_201/Ski-Blade/preprocessing.R', echo=TRUE)
source('~/info_201/Ski-Blade/preprocessing.R', echo=TRUE)
View(coord.frame)
weather.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
create.weather.frame <- function(coord.frame) {
for(i in 1:nrow(weather.frame)) {
print(i)
}
}
for(i in 1:nrow(weather.frame)) {
print(i)
}
weather.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
for(i in 1:nrow(weather.frame)) {
print(i)
}
View(weather.frame)
coord.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
View(coord.frame)
coord.frame$lat[1]
coord.frame$lat[7]
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
coord.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
# create vectors
num <- nrow(coord.frame)
temp <- vector(length = num)
precip <- vector(length = num)
precip.type <- vector(length = num)
clouds <- vector(length = num)
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
precip[i] <- weather.raw$currently$precipIntensity
if(precip == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
clouds[i] <- weather.raw$currently$cloudCover
}
getWeather <- function(coords){
darkSky.base.url <- "https://api.darksky.net/forecast/"
darkSky.key <- "1347397e6f4d6150a38600f4e7a5a001/"
response <- GET(paste0(darkSky.base.url, darkSky.key, coords))
body <- content(response, "text")
rep.data <- fromJSON(body)
return(rep.data)
}
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
precip[i] <- weather.raw$currently$precipIntensity
if(precip == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
clouds[i] <- weather.raw$currently$cloudCover
}
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
precip[i] <- weather.raw$currently$precipIntensity
if(precip == 0) {
precip.type[i] <- 'none'
} else {
#precip.type[i] <- weather.raw$currently$precipType
}
clouds[i] <- weather.raw$currently$cloudCover
}
if(precip == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
View(weather.raw)
precip[i] <- weather.raw$currently$precipIntensity
if(precip == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
precip.type[i] <- 'none'
if(precip === 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
if(precip == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
if(precip > 0) {
precip.type[i] <- weather.raw$currently$precipType
} else {
precip.type[i] <- 'none'
}
print(precip[i])
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
precip[i] <- weather.raw$currently$precipIntensity
if(precip[i] > 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
clouds[i] <- weather.raw$currently$cloudCover
}
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
precip[i] <- weather.raw$currently$precipIntensity
if(precip[i] == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
clouds[i] <- weather.raw$currently$cloudCover
}
source('~/info_201/Ski-Blade/preprocessing.R', echo=TRUE)
source('~/info_201/Ski-Blade/preprocessing.R', echo=TRUE)
View(frame)
source('~/info_201/Ski-Blade/preprocessing.R', echo=TRUE)
source("./processing.R")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(weather.frame)
View(weather.frame)
library(dplyr)
View(weather.frame)
weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame <- weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame <- create.weather.frame(coord.frame)
weather.frame$lat <- weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame$lat <- weather.frame %>% rowwise() %>% do(.$visibility)
weather.frame$lat <- weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame$lat <- weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame$rating <- weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame <- create.weather.frame(coord.frame)
weather.frame$rating <- weather.frame %>% rowwise() %>% do(lat = .$visibility)
weather.frame$rating <- weather.frame %>% rowwise() %>% do(.$visibility)
weather.frame$rating <- weather.frame %>% rowwise() %>% do(.$rating <- .$visibility)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/info_201/Ski-Blade/processing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# create vectors
num <- nrow(coord.frame)
temp <- vector(length = num)
precip <- vector(length = num)
precip.type <- vector(length = num)
clouds <- vector(length = num)
vis <- vector(length = num)
wind <- vector(length = num)
rating <- vector(length = num)
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
vis[i] <- weather.raw$currently$visibility
clouds[i] <- weather.raw$currently$cloudCover
precip[i] <- weather.raw$currently$precipIntensity
wind[i] <- weather.raw$currently$windSpeed
if(precip[i] == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
rating[i] <- assign.rating(temp[i], vis[i], clouds[i], precip[i], precip.type[i], wind[i])
}
# add vectors to finished frame
weather.frame <- coord.frame
weather.frame$temperature <- temp
weather.frame$precipitation <- precip
weather.frame$precipitation_type <- precip.type
weather.frame$clouds <- clouds
weather.frame$visibility <- vis
weather.frame$wind_speed <- wind
weather.frame$rating <- rating
# get a rating for each resort and add it to the frame
assign.rating(weather.frame)
source('~/.active-rstudio-document', echo=TRUE)
View(weather.frame)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(weather.frame)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
install.packages(ggmap)
install.packages("ggmap")
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
install.packages("ggrepel")
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
print(conditions.report)
View(ski.resorts)
source('~/.active-rstudio-document', echo=TRUE)
# Get data:
ski.resorts <- weather.frame
wa <- get_googlemap(center = "soap lake wa", zoom = 6, size = c(400, 250), maptype = "roadmap")
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = ski.resorts, aes(x = long, y = lat), fill = rating, alpha = .7, size = 3, shape = 21) +
geom_label_repel(data = ski.resorts, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30))
View(weather.frame)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, color = rating), fill = weather.frame$rating, alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_colour_gradient(low = "red", high = "green")
print(conditions.report)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
source('~/info_201/Ski-Blade/map.R', echo=TRUE)
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating, color = rating), alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "green")
print(conditions.report)
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating), alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "green")
print(conditions.report)
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating, color = rating), alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "green") +
scale_fill_gradient(low = "red", high = "green")
print(conditions.report)
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating, color = rating), alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "green") +
scale_color_gradient(low = "red", high = "green")
print(conditions.report)
source('~/info_201/Ski-Blade/example_use.R', echo=TRUE)
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating, color = rating), alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "green", limits=c(1, 10)) +
scale_color_gradient(low = "red", high = "green")
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating, color = rating), alpha = .7, size = 5, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "green", limits=c(1, 10)) +
scale_color_gradient(low = "red", high = "green",limits=c(1, 10))
print(conditions.report)
source('~/info_201/Ski-Blade/example_use.R', echo=TRUE)
