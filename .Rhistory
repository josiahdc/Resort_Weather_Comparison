# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date("2013-5-10")
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- spring_break - today
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- Day(spring_break) - Day(today)
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- (spring_break) - (today)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro((my_name, my_age, "1996-10-28"))
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "1996-10-28")
print(my_bday_intro)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "1996-10-28")
print(my_bday_intro)
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- (spring_break) - (today)
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "1996-10-28")
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
print(my_bday_intro)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "2018-10-28")
print(my_bday_intro)
print(days_to_break)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "2018-10-28")
print(days_to_break)
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- spring_break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- spring_break - today
print(days_to_break)
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- spring_break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste(intro, ". In", N, "days I'll be", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "2018-10-28")
print(my_bday_intro)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste0(intro, ". In", N, "days I'll be", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "2018-10-28")
print(my_bday_intro)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste0(intro, ". In ", N, " days I'll be ", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "2018-10-28")
print(my_bday_intro)
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakkeBIrthdayIntro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
intro <- makeIntroduction(name, age)
result <- paste0(intro, ". In ", N, " days I'll be ", new_age)
return(result)
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakkeBIrthdayIntro(my_name, my_age, "2018-10-28")
source('~/info_201/a2-r-intro-josiahdc/assignment.R')
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
res <- str_replace_all(courses, [:digit:], "")
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
res <- str_replace_all(courses, "[:digit:]", "")
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
RemoveDigits(courses)
RemoveDigits(courses)
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
RemoveDigits(courses)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
return(strings)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
RemoveDigits(courses)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
return(strings)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
courses <- RemoveDigits(courses)
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(str_detect(courses, "[:digit:]")) {
print("Oh no!")
} else {
print("yay!")
}
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(str_detect(courses, "[:digit:]") == T) {
print("Oh no!")
} else {
print("yay!")
}
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]")) {
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("yay!")
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("yay!")
}
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
return(strings)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
courses <- RemoveDigits(courses)
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("yay!")
}
source('~/info_201/a2-r-intro-josiahdc/assignment.R')
source('~/info_201/a2-r-intro-josiahdc/assignment.R')
credit.card.users <- c(1:100)
credit.card.users <- c(1:100)
credit.card.users <- c(1:100)
for (i in credit.card.users) {
credit.card.users[i] <- paste("User", i)
}
for (i in credit.card.users) {
credit.card.users[i] <- paste("User", i)
}
print(credit.card.users)
credit.card.users <- c(1:100)
for (i in credit.card.users) {
credit.card.users[i] <- paste("User", i)
}
print(credit.card.users)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyOwed <- runif(100, 10, 1000)
moneyOwed <- runif(100, 10, 1000)
moneyPaid <- runif(100, 500, 2000)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyOwed <- runif(100, 10.00, 1000.00)
moneyPaid <- runif(100, 500.00, 2000.00)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyPaid <- runif(100, 500, 2000)
moneyOwed <- runif(100, 10, 1000)
print(credit.card.users)
creditCardUsers <- c(1:100)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyOwed <- runif(100, 10, 1000)
moneyPaid <- runif(100, 500, 2000)
print(credit.card.users)
print(credit.card.users)
print(creditCardUsers)
moneyPaid <- runif(100, 500, 2000)
cardData <- data.frame(creditCardUsers, moneyOwed, moneyPaid)
print(cardData)
# Before you get started, make sure to set your working directory using the tilde (~)
getwd()
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~\Documents\info_201\a3-data-josiahdc")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents/info_201/a3-data-josiahdc")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents/info_201/a3-data-josiahdc/")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents/")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents")
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# Install the nycflights13 package and read it in. Require the dplyr package.
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE)) %>% arrange(-avg.dep.delay)
View(flights.by.month)
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE)) %>% arrange(-avg.dep.delay)
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
install(httr)
install.packages("htttr")
install.packages("httr")
install.packages("jsonlite")
library("jsonlite")
library("httr")
base.url <- 'https://pokeapi.co/api/v2/'
library("httr")
base.url <- 'https://pokeapi.co/api/v2/'
query.paramns <- list(query = pokemon/2/)
base.url <- 'https://pokeapi.co/api/v2/'
query.paramns <- list(query = "pokemon/2/")
response <- GET(base.url, query = query.paramns)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
View(results)
View(response)
View(response)
View(response)
formatted <- data.frame(results)
View(formatted)
formatted <- flatten(results)
formatted <- flatten(data.frame(results))
View(formatted)
base.url <- 'https://pokeapi.co/api/v2/'
query.paramns <- list(query = "pokemon/2/height")
response <- GET(base.url, query = query.paramns)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
library("httr")
base.url <- 'https://pokeapi.co/api/v2/pokemon/48'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
results$name
View(results)
View(results)
library("httr")
base.url <- 'https://pokeapi.co/api/v2/pokemon/pikachu'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
results$name
View(results)
results$id
api.key <- "a426ba4ee3fc42acb5cb93501e8a8caf"
base.url <- 'http://api.nytimes.com/svc/movies/2/reviews'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
View(results)
base.url <- 'http://api.nytimes.com/svc/movies/v2/reviews'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
shiny::runApp('info_201/a8-shiny-josiahdc')
install.packages(rsconnect)
install.packages("rsconnect")
{{ text }}
rsconnect::setAccountInfo(name='josiahdc', token='7F9832CF5E16DDC70EE5007B0A3C45C2', secret='hlodSjroIedCU5f3WbNoRQxG/UIppelLAGzesY7j')
setwd("~/info_201/Ski-Blade/")
api.key <- "b603391ff6a83d8a53b0ab613f5172ef"
source("./processing.R")
coord.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
weather.frame <- create.weather.frame(coord.frame)
View(weather.frame)
weather.names <- weather.frame$name
resort.names <- weather.frame$name
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
working.row <- weather.frame %>% filter(name == input$resort)
t <- weather.frame %>% filter(name == "Crystal")
View(t)
name <- t$name
working.row <- weather.frame %>% filter(name == "Crystal")
runApp()
