# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
res <- str_replace_all(courses, [:digit:], "")
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
res <- str_replace_all(courses, "[:digit:]", "")
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
RemoveDigits(courses)
RemoveDigits(courses)
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
RemoveDigits(courses)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
return(strings)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
RemoveDigits(courses)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
return(strings)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
courses <- RemoveDigits(courses)
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(str_detect(courses, "[:digit:]")) {
print("Oh no!")
} else {
print("yay!")
}
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(str_detect(courses, "[:digit:]") == T) {
print("Oh no!")
} else {
print("yay!")
}
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]")) {
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("yay!")
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("yay!")
}
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(strings) {
strings <- str_replace_all(courses, "[:digit:]", "")
return(strings)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
courses <- c("INFO340", "INFO360", "INFO380", "CSE142", "CSE143", "CSE154")
courses <- RemoveDigits(courses)
# Write an if/else statement that checks to see if your vector has any digits. If it does have digits, print
# "Oh no!", if it does not then print "Yay!"
if(any(str_detect(courses, "[:digit:]"))) {
print("Oh no!")
} else {
print("yay!")
}
source('~/info_201/a2-r-intro-josiahdc/assignment.R')
source('~/info_201/a2-r-intro-josiahdc/assignment.R')
credit.card.users <- c(1:100)
credit.card.users <- c(1:100)
credit.card.users <- c(1:100)
for (i in credit.card.users) {
credit.card.users[i] <- paste("User", i)
}
for (i in credit.card.users) {
credit.card.users[i] <- paste("User", i)
}
print(credit.card.users)
credit.card.users <- c(1:100)
for (i in credit.card.users) {
credit.card.users[i] <- paste("User", i)
}
print(credit.card.users)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyOwed <- runif(100, 10, 1000)
moneyOwed <- runif(100, 10, 1000)
moneyPaid <- runif(100, 500, 2000)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyOwed <- runif(100, 10.00, 1000.00)
moneyPaid <- runif(100, 500.00, 2000.00)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyPaid <- runif(100, 500, 2000)
moneyOwed <- runif(100, 10, 1000)
print(credit.card.users)
creditCardUsers <- c(1:100)
for (i in creditCardUsers) {
creditCardUsers[i] <- paste("User", i)
}
moneyOwed <- runif(100, 10, 1000)
moneyPaid <- runif(100, 500, 2000)
print(credit.card.users)
print(credit.card.users)
print(creditCardUsers)
moneyPaid <- runif(100, 500, 2000)
cardData <- data.frame(creditCardUsers, moneyOwed, moneyPaid)
print(cardData)
# Before you get started, make sure to set your working directory using the tilde (~)
getwd()
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~\Documents\info_201\a3-data-josiahdc")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents/info_201/a3-data-josiahdc")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents/info_201/a3-data-josiahdc/")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents/")
# Before you get started, make sure to set your working directory using the tilde (~)
setwd("~/Documents")
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# Install the nycflights13 package and read it in. Require the dplyr package.
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE)) %>% arrange(-avg.dep.delay)
View(flights.by.month)
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights.by.month <- group_by(flights, month) %>% summarise(avg.dep.delay = mean(dep_delay, na.rm = TRUE)) %>% arrange(-avg.dep.delay)
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(flights.by.month)
install(httr)
install.packages("htttr")
install.packages("httr")
install.packages("jsonlite")
library("jsonlite")
library("httr")
base.url <- 'https://pokeapi.co/api/v2/'
library("httr")
base.url <- 'https://pokeapi.co/api/v2/'
query.paramns <- list(query = pokemon/2/)
base.url <- 'https://pokeapi.co/api/v2/'
query.paramns <- list(query = "pokemon/2/")
response <- GET(base.url, query = query.paramns)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
View(results)
View(response)
View(response)
View(response)
formatted <- data.frame(results)
View(formatted)
formatted <- flatten(results)
formatted <- flatten(data.frame(results))
View(formatted)
base.url <- 'https://pokeapi.co/api/v2/'
query.paramns <- list(query = "pokemon/2/height")
response <- GET(base.url, query = query.paramns)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
library("httr")
base.url <- 'https://pokeapi.co/api/v2/pokemon/48'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
results$name
View(results)
View(results)
library("httr")
base.url <- 'https://pokeapi.co/api/v2/pokemon/pikachu'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
results$name
View(results)
results$id
api.key <- "a426ba4ee3fc42acb5cb93501e8a8caf"
base.url <- 'http://api.nytimes.com/svc/movies/2/reviews'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
View(results)
base.url <- 'http://api.nytimes.com/svc/movies/v2/reviews'
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
View(results)
shiny::runApp('info_201/a8-shiny-josiahdc')
install.packages(rsconnect)
install.packages("rsconnect")
{{ text }}
rsconnect::setAccountInfo(name='josiahdc', token='7F9832CF5E16DDC70EE5007B0A3C45C2', secret='hlodSjroIedCU5f3WbNoRQxG/UIppelLAGzesY7j')
setwd("~/info_201/Ski-Blade/")
api.key <- "b603391ff6a83d8a53b0ab613f5172ef"
source("./processing.R")
coord.frame <- read.csv("./coordinates.csv", stringsAsFactors = FALSE)
weather.frame <- create.weather.frame(coord.frame)
View(weather.frame)
weather.names <- weather.frame$name
resort.names <- weather.frame$name
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
working.row <- weather.frame %>% filter(name == input$resort)
t <- weather.frame %>% filter(name == "Crystal")
View(t)
name <- t$name
working.row <- weather.frame %>% filter(name == "Crystal")
runApp()
library(shiny)
library(dplyr)
shinyServer(function(input, output) {
# render the weather map
output$map <- renderPlot({
source("./map.R")
return(conditions.report)
})
output$description <- renderText({
working.row <- weather.frame %>% filter(name == input$resort)
sentance.one <- paste("The temperature at", working.row$name, "is currently",
working.row$temperature, "degrees fahrenheit.")
if(working.row$precipitation_type == "none") {
sentance.two <- "It is not currently raining or snowing."
} else {
sentance.two <- paste("The resort is getting", format(working.row$precipitation, scientific = FALSE),
"inches of", working.row$precipitation_type, "per hour.")
}
sentance.three <- paste0("The sky is ", (working.row$clouds * 100), "% occluded by clouds.")
if(working.row$visibility == 10) {
sentance.four <- paste("Visibility is ideal.")
} else {
sentance.four <- paste("Visibility is clear out to", working.row$visibility, "miles.")
}
sentance.five <- paste("Winds are blowing at", working.row$wind_speed, "miles per hour.")
Sentance.six <- paste("Overall conditions are rated", working.row$rating, "out of 10.")
return(
paste(sentance.one, sentance.two, sentance.three, sentance.four, sentance.five, Sentance.six)
)
})
})
runApp()
runApp()
library(jsonlite)
library(httr)
getWeather <- function(coords){
darkSky.base.url <- "https://api.darksky.net/forecast/"
darkSky.key <- "8ea884d5205e93cb045e5507b86d863c"
response <- GET(paste0(darkSky.base.url, darkSky.key, "/", coords))
body <- content(response, "text")
rep.data <- fromJSON(body)
return(rep.data)
}
library(shiny)
library(dplyr)
shinyServer(function(input, output) {
# render the weather map
output$map <- renderPlot({
source("./map.R")
return(conditions.report)
})
output$description <- renderText({
working.row <- weather.frame %>% filter(name == input$resort)
sentance.one <- paste("The temperature at", working.row$name, "is currently",
working.row$temperature, "degrees fahrenheit.")
if(working.row$precipitation_type == "none") {
sentance.two <- "It is not currently raining or snowing."
} else {
sentance.two <- paste("The resort is getting", format(working.row$precipitation, scientific = FALSE),
"inches of", working.row$precipitation_type, "per hour.")
}
sentance.three <- paste0("The sky is ", (working.row$clouds * 100), "% occluded by clouds.")
if(working.row$visibility == 10) {
sentance.four <- paste("Visibility is ideal.")
} else {
sentance.four <- paste("Visibility is clear out to", working.row$visibility, "miles.")
}
sentance.five <- paste("Winds are blowing at", working.row$wind_speed, "miles per hour.")
Sentance.six <- paste("Overall conditions are rated", working.row$rating, "out of 10.")
return(
paste(sentance.one, sentance.two, sentance.three, sentance.four, sentance.five, Sentance.six)
)
})
})
runApp()
library(shiny)
library(dplyr)
shinyServer(function(input, output) {
# render the weather map
output$map <- renderPlot({
source("./map.R")
return(conditions.report)
})
output$description <- renderText({
working.row <- weather.frame %>% filter(name == input$resort)
sentance.one <- paste("The temperature at", working.row$name, "is currently",
working.row$temperature, "degrees fahrenheit.")
if(working.row$precipitation_type == "none") {
sentance.two <- "It is not currently raining or snowing."
} else {
sentance.two <- paste("The resort is getting", format(working.row$precipitation, scientific = FALSE),
"inches of", working.row$precipitation_type, "per hour.")
}
sentance.three <- paste0("The sky is ", (working.row$clouds * 100), "% occluded by clouds.")
if(working.row$visibility == 10) {
sentance.four <- paste("Visibility is ideal.")
} else {
sentance.four <- paste("Visibility is clear out to", working.row$visibility, "miles.")
}
sentance.five <- paste("Winds are blowing at", working.row$wind_speed, "miles per hour.")
Sentance.six <- paste("Overall conditions are rated", working.row$rating, "out of 10.")
return(
paste(sentance.one, sentance.two, sentance.three, sentance.four, sentance.five, Sentance.six)
)
})
})
library(shiny)
library(shinythemes)
shinyUI(
fluidPage(theme = shinytheme("slate"),
# add a title
titlePanel("Washington Ski Resort Weather"),
sidebarLayout(
sidebarPanel(
# add a widget to display more detailed information on a resort
radioButtons('resort',
"Detailed report by resort",
resort.names
)
),
# create the map
mainPanel(
plotOutput('map', width = "100%"),
h3(textOutput('description'))
)
)
)
)
install.packages("shiny")
shiny::runApp()
library(jsonlite)
library(httr)
getWeather <- function(coords){
darkSky.base.url <- "https://api.darksky.net/forecast/"
darkSky.key <- "8ea884d5205e93cb045e5507b86d863c"
response <- GET(paste0(darkSky.base.url, darkSky.key, "/", coords))
body <- content(response, "text")
rep.data <- fromJSON(body)
return(rep.data)
}
library(dplyr)
source("./apicall.R")
# calls the dark sky api once for each ski resort in coordinates.csv
# constructs a data frame of weather values to be used in calculating the score
create.weather.frame <- function(coord.frame) {
# create vectors
num <- nrow(coord.frame)
temp <- vector(length = num)
precip <- vector(length = num)
precip.type <- vector(length = num)
clouds <- vector(length = num)
vis <- vector(length = num)
wind <- vector(length = num)
rating <- vector(length = num)
# add values to vectors
for(i in 1:num) {
coords <- paste0(coord.frame$lat[i], ",", coord.frame$long[i])
weather.raw <- getWeather(coords)
temp[i] <- weather.raw$currently$temperature
vis[i] <- weather.raw$currently$visibility
clouds[i] <- weather.raw$currently$cloudCover
precip[i] <- weather.raw$currently$precipIntensity
wind[i] <- weather.raw$currently$windSpeed
if(precip[i] == 0) {
precip.type[i] <- 'none'
} else {
precip.type[i] <- weather.raw$currently$precipType
}
# rate the resorts
rating[i] <- assign.rating(temp[i], vis[i], clouds[i], precip[i], precip.type[i], wind[i])
}
# add vectors to finished frame
weather.frame <- coord.frame
weather.frame$temperature <- temp
weather.frame$precipitation <- precip
weather.frame$precipitation_type <- precip.type
weather.frame$clouds <- clouds
weather.frame$visibility <- vis
weather.frame$wind_speed <- wind
weather.frame$rating <- rating
return(weather.frame)
}
# assigns the resort a rating based on weather conditions
assign.rating <- function(temp, vis, clouds, precip, precip.type, wind) {
rating <- 10
# test if above freezing
if(!is.na(temp) & temp > 32) {
rating = rating - 1
}
# test if vis is good
if(!is.na(vis) & vis < 5) {
rating = rating - 1
}
# test to see if there are clouds in the sky
if(!is.na(clouds) & clouds > .1) {
rating = rating - 1
}
# test to find out if it is raining or snowing and how hard
if(!is.na(precip.type) & precip.type != 'none') {
if(!is.na(precip.type) & precip.type == 'snow') {
if(!is.na(precip) & precip >= .01) {
rating = rating - 1
}
} else {
rating = rating - 2
if(!is.na(precip) & precip >= .01) {
rating = rating - 3
}
}
}
# test if winds are strong
if(!is.na(wind) & wind >= 10) {
rating = rating - 1
}
return(rating)
}
library(ggmap)
library(ggplot2)
library(ggrepel)
# Get Data for Washington Map:
wa <- get_googlemap(center = "soap lake wa", zoom = 6, size = c(400, 250), maptype = "roadmap")
# Creates base map, to be layered on later with ski resorts.
base.map <- ggmap(wa) + ggtitle("Ski Resort Conditions in WA:") +
theme(plot.title = element_text(hjust = 0.5, size = 15))
# Creates map of WA, & points of ski resorts:
conditions.report <- ggmap(wa) +
geom_point(data = weather.frame, aes(x = long, y = lat, fill = rating, color = rating), size = 8, shape = 21) +
geom_label_repel(data = weather.frame, aes(x = long, y = lat, label = name), nudge_x = .5, nudge_y = .15) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)  + ggtitle("Ski Resort Conditions in WA:") + theme(plot.title = element_text(hjust = 0.5, size = 30)) +
scale_fill_gradient(low = "red", high = "blue", limits=c(1, 10)) +
scale_color_gradient(low = "red", high = "blue",limits=c(1, 10)) +
theme_bw(base_size = 15)
runApp()
